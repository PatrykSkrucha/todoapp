{"version":3,"sources":["components/Tasks/Task/Task.scss","components/Tasks/Task/Task.js","components/Tasks/Tasks.js","components/Input/Input.js","components/ToDoApp/TodoApp.js","containers/App.js","serviceWorker.js","index.js","components/ToDoApp/ToDoApp.scss","components/Tasks/Tasks.scss"],"names":["module","exports","Task","Text","DeleteButton","task","props","react_default","a","createElement","Fragment","className","classes","IconButton_default","color","onClick","deleteHandler","Delete_default","tasks","list","toDo","map","el","key","Task_Task","value","UlList","withStyles","root","background","borderRadius","border","boxShadow","textTransform","marginTop","input","index_es","Input","id","label","type","onChange","changeHandler","inputRef","onKeyDown","handleKeyDown","placeholder","size","submitHandler","toDoApp","useRef","_useState","useState","_useState2","Object","slicedToArray","setTask","_useState3","_useState4","toDoList","setToDoList","trim","concat","current","Wrap","e","target","refInput","which","Tasks","Tasks_Tasks","filter","App","TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12212292.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task__Task___3UTC2\",\"Text\":\"Task__Text___HK-JR\",\"DeleteButton\":\"Task__DeleteButton___3b3yy\"};","import React from 'react'\r\nimport classes from './Task.scss'\r\nimport PropTypes from 'prop-types'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst task = (props) =>{\r\n\r\n\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<li className={classes.Task}>\r\n\t\t\t\t<div className={classes.DeleteButton}>\r\n\t\t\t\t\t<IconButton color='primary' onClick={props.deleteHandler}>\r\n\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className={classes.Text}>{props.task}</span></li>\r\n\t\t</>\r\n)\r\n} \r\n\r\ntask.propTypes = {\r\n\ttask: PropTypes.string.isRequired\r\n}\r\n\r\nexport default task","import React from 'react'\r\nimport Task from './Task/Task'\r\nimport classes from './Tasks.scss'\r\n\r\nconst tasks = (props) => {\r\n\r\n\tconst clicked = key => (\r\n\t\tconsole.log(key)\r\n\t)\r\n\t\r\n\tconst list = props.toDo.map((el,key)=>{\r\n\t\treturn(\r\n\t\t\t<Task\r\n\t\t\t\tkey={key}\r\n\t\t\t\ttask={el}\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t\tdeleteHandler={()=>props.deleteHandler(key)} />\r\n\t\t)\r\n\t})\r\n\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<ul className={classes.UlList}>\r\n\t\t\t\t{list}\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t)\r\n\r\n}\r\n\r\nexport default tasks","import React from 'react'\r\nimport {Input, Button, withStyles} from '@material-ui/core';\r\n\r\nconst styles = {\r\n\troot: {\r\n\t  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n\t  borderRadius: 3,\r\n\t  border: 0,\r\n\t  color: 'white',\r\n\t  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n\t  textTransform: 'capitalize',\r\n\t  marginTop: 10,\r\n\t},\r\n\tinput: {\r\n\t\tmarginTop: 15,\r\n\t}\r\n}\r\n\t\r\n\r\nconst input = (props) => {\r\n\r\n\r\n\tconst { classes } = props;\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Input\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\tinput: classes.input,\r\n\t\t\t\t}}\r\n\t\t\t\tclassName={classes.Input}\r\n\t\t\t\tid=\"standard-name\"\r\n\t\t\t\tlabel=\"Utwórz notatkę\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={props.changeHandler}\r\n\t\t\t\tinputRef={props.inputRef}\r\n\t\t\t\tonKeyDown={props.handleKeyDown}\r\n\t\t\t\tplaceholder=\"Utwórz zadanie\"\r\n\t\t\t/>\r\n\t\t\t\r\n\r\n\t\t\t<Button\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\troot: classes.root, \r\n\t\t\t\t}}\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tonClick={props.submitHandler}>\r\n\t\t\t\t\r\n\t\t\t\tDodaj zadanie\r\n    \t\t</Button>\r\n\t\t</>\r\n\r\n\t)\r\n}\r\n\r\nexport default withStyles(styles)(input);\r\n\r\n","import React, { useState, useRef } from 'react'\r\nimport Tasks from '../Tasks/Tasks'\r\nimport Input from '../Input/Input'\r\nimport classes from './ToDoApp.scss'\r\n\r\nconst toDoApp = () => {\r\n\r\n\tconst inputRef = useRef()\r\n\tconst [task, setTask] = useState(``)\r\n\tconst [toDoList, setToDoList] = useState([])\r\n\r\n\tconst changeHandler = e => {\r\n\t\tsetTask(e.target.value)\r\n\t}\r\n\r\n\tconst submitHandler = () => {\r\n\t\tif (task.trim()){\r\n\t\t\tsetToDoList(toDoList.concat(task))\r\n\t\t\tsetTask('')\r\n\t\t\tinputRef.current.value=``\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleKeyDown = e => {\r\n\t\tif(e.which===13) submitHandler()\r\n\t}\r\n\r\n\tconst deleteHandler = id => {\r\n\t\t\r\n\t\tsetToDoList(toDoList.filter((el,key)=>key!==id))\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.Wrap}>\r\n\t\t\t<Input\r\n\t\t\t\tchangeHandler={changeHandler}\r\n\t\t\t\trefInput={inputRef}\r\n\t\t\t\thandleKeyDown={handleKeyDown}\r\n\t\t\t\ttask={task}\r\n\t\t\t\tsubmitHandler={submitHandler}\r\n\t\t\t\tvalue={task}\r\n\t\t\t\tinputRef={inputRef}\r\n\t\t\t\t/>\r\n\t\t\t<div className={classes.Tasks}>\r\n\t\t\t\t<Tasks\r\n\t\t\t\t\ttoDo={toDoList}\r\n\t\t\t\t\tdeleteHandler={deleteHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t</div>\r\n\t  \t\t</div>\r\n\t)\r\n}\r\n\r\nexport default toDoApp;","import React from 'react';\nimport TodoApp from '../components/ToDoApp/TodoApp'\n\nconst App = () => {\n\n\t\n\n\treturn (\n\t\t<>\n\t\t\t<TodoApp />\n\t\t</>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"ToDoApp__Wrap___18CrV\",\"Tasks\":\"ToDoApp__Tasks___2MaVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UlList\":\"Tasks__UlList___dkvZ9\"};"],"sourceRoot":""}
{"version":3,"sources":["components/Tasks/Task/Task.scss","components/Tasks/Task/Task.js","containers/App.js","components/Input/Input.js","serviceWorker.js","index.js","components/ToDoApp/ToDoApp.scss","components/Tasks/Tasks.scss"],"names":["module","exports","Task","Text","DeleteButton","withStyles","theme","deleteIcon","color","blue","&:hover","props","classes","react_default","a","createElement","Fragment","className","styles","task","index_es","onClick","deleteHandler","Delete_default","App","root","background","borderRadius","border","boxShadow","textTransform","marginTop","input","Object","defineProperty","width","breakpoints","down","id","label","type","onChange","changeHandler","inputRef","onKeyDown","handleKeyDown","placeholder","size","submitHandler","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Wrap","Tasks","UlList"],"mappings":"wIACAA,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,KAAA,qBAAAC,aAAA,iMCuCHC,qBAjCD,SAAAC,GAAK,MAElB,CACCC,WAAY,CACXC,MAAOC,IAAK,KACZC,UAAW,CACVF,MAAOC,IAAK,SA2BDJ,CArBD,SAACM,GAAS,IAEdC,EAAYD,EAAZC,QAGR,OACCC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,MAAIE,UAAWC,IAAOhB,MACrBW,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAOf,MAAOQ,EAAMQ,MACrCN,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOd,cACtBS,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAASV,EAAMW,cAAeL,UAAWL,EAAQL,YAC5DM,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,yBChBSU,GCiDAnB,qBA5DA,SAAAC,GAAK,MAEnB,CACCmB,KAAM,CACLC,WAAY,mDACZC,aAAc,EACdC,OAAQ,EACRpB,MAAO,QACPqB,UAAW,sCACXC,cAAe,aACfC,UAAW,IAEZC,MAAMC,OAAAC,EAAA,EAAAD,CAAA,CACLF,UAAW,GACXI,MAAO,QACN7B,EAAM8B,YAAYC,KAAK,MAAQ,CAC/BF,MAAO,WA4CI9B,CArCD,SAACM,GAAU,IAGhBC,EAAYD,EAAZC,QAIR,OACCC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACCR,QAAS,CACRoB,MAAOpB,EAAQoB,OAEhBM,GAAG,gBACHC,MAAM,yBACNC,KAAK,OACLC,SAAU9B,EAAM+B,cAChBC,SAAUhC,EAAMgC,SAChBC,UAAWjC,EAAMkC,cACjBC,YAAY,sBAIbjC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACCR,QAAS,CACRa,KAAMb,EAAQa,MAEfsB,KAAK,SACL1B,QAASV,EAAMqC,eALhB,0BD9CS,WAIX,OACCnC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,gCEGiBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCElInBhE,EAAAC,QAAA,CAAkBgE,KAAA,wBAAAC,MAAA,8CCAlBlE,EAAAC,QAAA,CAAkBkE,OAAA","file":"static/js/main.70269d86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task__Task___3UTC2\",\"Text\":\"Task__Text___HK-JR\",\"DeleteButton\":\"Task__DeleteButton___3b3yy\"};","import React from 'react'\r\nimport styles from './Task.scss'\r\nimport PropTypes from 'prop-types'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {IconButton, withStyles} from '@material-ui/core/';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst style = theme =>(\r\n\r\n\t{\r\n\t\tdeleteIcon: {\r\n\t\t\tcolor: blue[600],\r\n\t\t\t'&:hover': {\r\n\t\t\t\tcolor: blue[900],\r\n\t\t\t  },\r\n\t\t}\r\n\t}\r\n\t\r\n\t) \r\n\tconst task = (props) =>{\r\n\t\t\r\n\t\tconst { classes } = props;\r\n\t\t\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<li className={styles.Task}>\r\n\t\t\t\t<span className={styles.Text}>{props.task}</span>\r\n\t\t\t\t<div className={styles.DeleteButton}>\r\n\t\t\t\t\t<IconButton onClick={props.deleteHandler} className={classes.deleteIcon}>\r\n\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</>\r\n)\r\n} \r\n\r\n\r\n\r\nexport default withStyles(style)(task);\r\n\r\n","import React from 'react';\nimport TodoApp from '../components/ToDoApp/TodoApp'\n\nconst App = () => {\n\n\t\n\n\treturn (\n\t\t<>\n\t\t\t<p>simple paragraph</p>\n\t\t</>\n\t)\n}\n\nexport default App;\n","import React from 'react'\r\nimport {Input, Button, withStyles} from '@material-ui/core';\r\n\r\nconst styles = theme =>(\r\n\r\n\t{\r\n\t\troot: {\r\n\t\t\tbackground: 'linear-gradient(45deg, #00acc1 30%, #01579b 90%)',\r\n\t\t\tborderRadius: 3,\r\n\t\t\tborder: 0,\r\n\t\t\tcolor: 'white',\r\n\t\t\tboxShadow: '0 3px 5px 2px rgba(0, 172, 193, .2)',\r\n\t\t\ttextTransform: 'capitalize',\r\n\t\t\tmarginTop: 10,\r\n\t\t},\r\n\t\tinput: {\r\n\t\t\tmarginTop: 15,\r\n\t\t\twidth: '50vw',\r\n\t\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\t\twidth: '90vw',\r\n\t\t\t  },\r\n\t\t}\r\n\t}\r\n\t) \r\n\t\r\n\r\nconst input = (props) => {\r\n\r\n\r\n\tconst { classes } = props;\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Input\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\tinput: classes.input,\r\n\t\t\t\t}}\r\n\t\t\t\tid=\"standard-name\"\r\n\t\t\t\tlabel=\"Utwórz notatkę\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={props.changeHandler}\r\n\t\t\t\tinputRef={props.inputRef}\r\n\t\t\t\tonKeyDown={props.handleKeyDown}\r\n\t\t\t\tplaceholder=\"Utwórz zadanie\"\r\n\t\t\t/>\r\n\t\t\t\r\n\r\n\t\t\t<Button\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\troot: classes.root, \r\n\t\t\t\t}}\r\n\t\t\t\tsize=\"medium\"\r\n\t\t\t\tonClick={props.submitHandler}>\r\n\t\t\t\t\r\n\t\t\t\tDodaj zadanie\r\n    \t\t</Button>\r\n\t\t</>\r\n\r\n\t)\r\n}\r\n\r\nexport default withStyles(styles)(input);\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"ToDoApp__Wrap___18CrV\",\"Tasks\":\"ToDoApp__Tasks___2MaVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UlList\":\"Tasks__UlList___dkvZ9\"};"],"sourceRoot":""}